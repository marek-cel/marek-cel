/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2206                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}

// ************************************************************************* //

#include "include/controlVolume"

// ************************************************************************* //

// control volume coordinates
cv_x_min $controlVolOriginX;
cv_x_max #eval "$controlVolOriginX + $controlVolLength";
cv_y_min #eval "-$controlVolWidth  / 2.0";
cv_y_max #eval " $controlVolWidth  / 2.0";
cv_z_min #eval "-$controlVolHeight / 2.0";
cv_z_max #eval " $controlVolHeight / 2.0";

// main section coordinates
ms_x_min $mainSectionOriginX;
ms_x_max #eval "$mainSectionOriginX + $mainSectionLength";

// inlet and outlet length
li #eval "$ms_x_min - $cv_x_min";
lo #eval "$cv_x_max - $ms_x_max";

// number of cells
xcells_m #eval "round( $mainSectionLength / $mainSectionCellSize )";
xcells_i #eval "round( 0.5 * $li / $mainSectionCellSize )";
xcells_o #eval "round( 0.5 * $lo / $mainSectionCellSize )";

xcells #eval "$xcells_m + $xcells_i + $xcells_o";
ycells #eval "round( $controlVolWidth  / $mainSectionCellSize )";
zcells #eval "round( $controlVolHeight / $mainSectionCellSize )";

fracLength_m #eval "$mainSectionLength / $controlVolLength";
fracLength_i #eval "$li / $controlVolLength";
fracLength_o #eval "$lo / $controlVolLength";

fracCells_m #eval "$xcells_m / $xcells";
fracCells_i #eval "$xcells_i / $xcells";
fracCells_o #eval "$xcells_o / $xcells";

// ************************************************************************* //

scale 1.0;


vertices
(
    ( $cv_x_min  $cv_y_min  $cv_z_min )
    ( $cv_x_max  $cv_y_min  $cv_z_min )
    ( $cv_x_min  $cv_y_max  $cv_z_min )
    ( $cv_x_max  $cv_y_max  $cv_z_min )
    ( $cv_x_min  $cv_y_min  $cv_z_max )
    ( $cv_x_max  $cv_y_min  $cv_z_max )
    ( $cv_x_min  $cv_y_max  $cv_z_max )
    ( $cv_x_max  $cv_y_max  $cv_z_max )
);


blocks
(
    hex ( 0 1 3 2 4 5 7 6 ) ( $xcells $ycells $zcells )
    simpleGrading
    (
        (
            ( $fracLength_i $fracCells_i 0.5 )
            ( $fracLength_m $fracCells_m 1.0 )
            ( $fracLength_o $fracCells_o 2.0 )
        )
        1
        1 
    )
);


edges
(
);


boundary
(
    inlet
    {
        type patch;
        faces
        (
            ( 0 4 6 2 )
        );
    }
    
    outlet
    {
        type patch;
        faces
        (
            ( 1 3 7 5 )
        );
    }
    
    freestream
    {
        type patch;
        faces
        (
            ( 0 1 5 4 ) // left
            ( 2 6 7 3 ) // right
            ( 0 2 3 1 ) // bottom
            ( 4 5 7 6 ) // top
        );
    }
);


mergePatchPairs
(
);

// ************************************************************************* //
