#!/bin/bash
cd ${0%/*} || exit 1    # Run from this directory

################################################################################

function printExecutionTime()
{
    TIME_1=$(date +%s)
    TIME_T=$(expr $TIME_1 - $2 )
    TIME_H=$(expr $TIME_T / 3600 )
    TIME_M=$(expr $(expr $TIME_T - 3600 \* $TIME_H ) / 60 )
    TIME_S=$(expr $TIME_T - 3600 \* $TIME_H - 60 \* $TIME_M )
    TIME_F=`printf %02d ${TIME_H}`:`printf %02d ${TIME_M}`:`printf %02d ${TIME_S}`
    echo "$1 $TIME_F $3 $4"
}

################################################################################

# Source run functions
. $WM_PROJECT_DIR/bin/tools/RunFunctions

################################################################################

TIME_0=$(date +%s)
echo $(date +%Y-%m-%d\ %H:%M:%S) - Computations started

################################################################################

PARALLEL=true

################################################################################
# EXECUTION - START
################################################################################

echo "Copying 0.orig to 0"
TMP_0=$(date +%s)
cp -r 0.orig 0
EXIT_CODE=$?
printExecutionTime "Copying 0.orig to 0 finished in " $TMP_0 "with exit code" $EXIT_CODE?
if [ $EXIT_CODE -ne 0 ]; then exit 1; fi

echo "Running blockMesh"
TMP_0=$(date +%s)
blockMesh > log.blockMesh 2>&1
EXIT_CODE=$?
printExecutionTime "blockMesh finished in " $TMP_0 "with exit code" $EXIT_CODE
if [ $EXIT_CODE -ne 0 ]; then exit 1; fi

echo "Running surfaceFeatureExtract"
TMP_0=$(date +%s)
surfaceFeatureExtract > log.surfaceFeatureExtract 2>&1
EXIT_CODE=$?
printExecutionTime "surfaceFeatureExtract finished in " $TMP_0 "with exit code" $EXIT_CODE
if [ $EXIT_CODE -ne 0 ]; then exit 1; fi

if $PARALLEL
then
    echo "Running decomposePar"
    TMP_0=$(date +%s)
    decomposePar -copyZero > log.decomposePar 2>&1
    EXIT_CODE=$?
    printExecutionTime "decomposePar finished in " $TMP_0 "with exit code" $EXIT_CODE
    if [ $EXIT_CODE -ne 0 ]; then exit 1; fi

    echo "Running snappyHexMesh in parallel using $(getNumberOfProcessors) processes"
    TMP_0=$(date +%s)
    mpirun -np $(getNumberOfProcessors) snappyHexMesh -parallel -overwrite > log.snappyHexMesh 2>&1
    EXIT_CODE=$?
    printExecutionTime "snappyHexMesh finished in " $TMP_0 "with exit code" $EXIT_CODE
    if [ $EXIT_CODE -ne 0 ]; then exit 1; fi
else
    echo "Running snappyHexMesh"
    TMP_0=$(date +%s)
    snappyHexMesh  -overwrite > log.snappyHexMesh 2>&1
    EXIT_CODE=$?
    printExecutionTime "snappyHexMesh finished in " $TMP_0 "with exit code" $EXIT_CODE
    if [ $EXIT_CODE -ne 0 ]; then exit 1; fi
fi

echo "Running checkMesh"
TMP_0=$(date +%s)
checkMesh > log.checkMesh 2>&1
EXIT_CODE=$?
printExecutionTime "checkMesh finished in " $TMP_0 "with exit code" $EXIT_CODE
if [ $EXIT_CODE -ne 0 ]; then exit 1; fi

if $PARALLEL
then
    echo "Running renumberMesh in parallel using $(getNumberOfProcessors) processes"
    TMP_0=$(date +%s)
    mpirun -np $(getNumberOfProcessors) renumberMesh -parallel -overwrite > log.renumberMesh 2>&1
    EXIT_CODE=$?
    printExecutionTime "renumberMesh finished in " $TMP_0 "with exit code" $EXIT_CODE
    if [ $EXIT_CODE -ne 0 ]; then exit 1; fi
    
    echo "Running patchSummary in parallel using $(getNumberOfProcessors) processes"
    TMP_0=$(date +%s)
    mpirun -np $(getNumberOfProcessors) patchSummary -parallel > log.patchSummary 2>&1
    printExecutionTime "patchSummary finished in " $TMP_0 "with exit code" $EXIT_CODE
    if [ $EXIT_CODE -ne 0 ]; then exit 1; fi
    
    echo "Running potentialFoam in parallel using $(getNumberOfProcessors) processes"
    TMP_0=$(date +%s)
    mpirun -np $(getNumberOfProcessors) potentialFoam -parallel > log.potentialFoam 2>&1
    EXIT_CODE=$?
    printExecutionTime "potentialFoam finished in " $TMP_0 "with exit code" $EXIT_CODE
    if [ $EXIT_CODE -ne 0 ]; then exit 1; fi
    
    echo "Running $(getApplication) in parallel using $(getNumberOfProcessors) processes"
    TMP_0=$(date +%s)
    mpirun -np $(getNumberOfProcessors) $(getApplication) -parallel > log.$(getApplication) 2>&1
    EXIT_CODE=$?
    printExecutionTime "$(getApplication) finished in " $TMP_0 "with exit code" $EXIT_CODE
    if [ $EXIT_CODE -ne 0 ]; then exit 1; fi
else
    echo "Running potentialFoams"
    TMP_0=$(date +%s)
    potentialFoam > log.potentialFoam 2>&1
    EXIT_CODE=$?
    printExecutionTime "potentialFoam finished in " $TMP_0 "with exit code" $EXIT_CODE
    if [ $EXIT_CODE -ne 0 ]; then exit 1; fi
    
    echo "Running $(getApplication)"
    TMP_0=$(date +%s)
    $(getApplication) > log.$(getApplication) 2>&1
    EXIT_CODE=$?
    printExecutionTime "$(getApplication) finished in " $TMP_0 "with exit code" $EXIT_CODE
    if [ $EXIT_CODE -ne 0 ]; then exit 1; fi
fi

if $PARALLEL
then
    echo "Running reconstructParMesh"
    TMP_0=$(date +%s)
    reconstructParMesh -constant > log.reconstructParMesh 2>&1
    EXIT_CODE=$?
    printExecutionTime "reconstructParMesh finished in " $TMP_0 "with exit code" $EXIT_CODE
    if [ $EXIT_CODE -ne 0 ]; then exit 1; fi
    
    echo "Running reconstructPar"
    reconstructPar -latestTime > log.reconstructPar 2>&1
    EXIT_CODE=$?
    printExecutionTime "reconstructPar finished in " $TMP_0 "with exit code" $EXIT_CODE
    if [ $EXIT_CODE -ne 0 ]; then exit 1; fi
fi

echo "Running foamLog"
foamLog log.$(getApplication)

################################################################################
# EXECUTION - FINISH
################################################################################

printExecutionTime "OpenFOAM finished in " $TIME_0
