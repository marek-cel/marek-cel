#include "TreeItem.h"

////////////////////////////////////////////////////////////////////////////////

TreeItem::TreeItem(const QVector<QVariant>& data, TreeItem* parent)
    : parent_(parent)
    , data_(data)
{

}

////////////////////////////////////////////////////////////////////////////////

TreeItem::~TreeItem()
{
    qDeleteAll(children_);
}

////////////////////////////////////////////////////////////////////////////////

void TreeItem::appendChild(TreeItem* item)
{
    children_.append(item);
}

////////////////////////////////////////////////////////////////////////////////

TreeItem* TreeItem::child(int row)
{
    if ( row < 0 || row >= children_.size() )
    {
        return nullptr;
    }

    return children_.at(row);
}

////////////////////////////////////////////////////////////////////////////////

int TreeItem::childCount() const
{
    return children_.count();
}

////////////////////////////////////////////////////////////////////////////////

int TreeItem::columnCount() const
{
    return data_.count();
}

////////////////////////////////////////////////////////////////////////////////

QVariant TreeItem::data(int column) const
{
    if ( column < 0 || column >= data_.size() )
    {
        return QVariant();
    }

    return data_.at(column);
}

////////////////////////////////////////////////////////////////////////////////

int TreeItem::row() const
{
    if ( parent_ )
    {
        return parent_->children_.indexOf(const_cast<TreeItem*>(this));
    }

    return 0;
}

////////////////////////////////////////////////////////////////////////////////

TreeItem* TreeItem::parent()
{
    return parent_;
}
