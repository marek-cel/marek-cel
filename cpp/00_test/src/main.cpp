#include <iostream>

////////////////////////////////////////////////////////////////////////////////

using namespace std;

////////////////////////////////////////////////////////////////////////////////

void fun( int tab[] )
{
    tab[ 0 ] = 0;
}

////////////////////////////////////////////////////////////////////////////////

void fun2()
{
    const int a = 1;
    const int *cpa = &a;

    //int *pa = reinterpret_cast<int*>(cpa);
    //*pa = 2;

    cout << a << endl;
}

////////////////////////////////////////////////////////////////////////////////

class A
{
public:

    int _a {};

    void fun() { _a = 7; }

    virtual void afun() = 0;

protected:

    int _x {};
};

////////////////////////////////////////////////////////////////////////////////

class B : protected A
{
public:

    virtual void afun() { _x = 1; }
};

////////////////////////////////////////////////////////////////////////////////

class C : public B
{
};

////////////////////////////////////////////////////////////////////////////////

void fun3( A &a )
{
    a.fun();
}

////////////////////////////////////////////////////////////////////////////////

int main()
{
    C  c;

    //c.fun(); // error!
    c.afun();

    ///////////////////////////////////////////////////

    int tab[] { 4, 3, 2, 1 };

    cout << tab[2] << " " << *(2+tab) << " " << (2+tab)[0] << endl;

    cout << tab[ 0 ] << " " << tab[ 1 ] << endl;

    fun( tab );

    cout << tab[ 0 ] << " " << tab[ 1 ] << endl;

    fun2();

    class X
    {
    public:
        static void fun()
        {
            cout << "X::fun()" << endl;
        }
    };

    X::fun();

    ///////////////////////////////////////////////////

    //const int *cptr = &( 2 ); // error!

    ///////////////////////////////////////////////////

    double xx = 1'000'000.01;
    double ii = 1'000'000;

    cout << xx << " " << ii << endl;

    ///////////////////////////////////////////////////


    int8_t aaa = 200;
    cout << (int)aaa <<endl;

    float xxx = 1/2;
    cout << xxx << endl;

    return 0;
}
